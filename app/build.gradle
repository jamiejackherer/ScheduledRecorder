apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

// Signing.
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.iclaude.scheduledrecorder"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    android.defaultConfig.vectorDrawables.useSupportLibrary = true

    // Using Data Binding library.
    dataBinding {
        enabled = true
    }

    // Signing.
    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
        }
    }
    lintOptions {
        disable 'MissingTranslation'
    }

    // Timeout for installing the app on the device
    adbOptions {
        timeOutInMs = 30 * 1000
    }

    // Added for Robolectric compatibility.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

ext {
    libraryVersion = '27.1.1'
    daggerVersion = '2.15'
    roomVersion = '1.0.0'
    mockitoVersion = '2.+'
    hamcrestVersion = '1.3'
}

dependencies {
    implementation "com.android.support:appcompat-v7:$libraryVersion"
    implementation "com.android.support:cardview-v7:$libraryVersion"
    implementation "com.android.support:recyclerview-v7:$libraryVersion"
    implementation "com.android.support:support-v13:$libraryVersion"
    implementation "com.android.support:support-v4:$libraryVersion"
    implementation "com.android.support:design:$libraryVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'

    implementation 'com.github.sundeepk:compact-calendar-view:2.0.2.2'
    implementation "com.google.guava:guava:22.0"

    // Room.
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$roomVersion"
    androidTestImplementation "android.arch.persistence.room:testing:$roomVersion"
    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:1.1.1"
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"

    // Dagger2.
    implementation "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    compileOnly 'javax.annotation:jsr250-api:1.0'
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    // RxJava2.
    implementation 'io.reactivex.rxjava2:rxjava:2.1.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'


    // Local unit tests.
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "android.arch.core:core-testing:$roomVersion"

    // Other tests.
    androidTestImplementation('com.android.support.test:runner:1.0.1') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation('com.android.support.test:rules:1.0.1') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:3.0.1') {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    }
    implementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    implementation 'com.android.support:support-annotations:27.1.1'
    implementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.3.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

// Copy apks in the apks folder at every build.
task copyApks(type: Copy, dependsOn: assemble) {
    from("$buildDir/outputs/apk") {
        exclude '**/*unsigned.apk', '**/*unaligned.apk'
    }
    into '../apks'
}

// Delete apks folder.
task cleanApksFolder(type: Delete) {
    delete "$rootProject.projectDir/apks/"
}

// Cleans the project and deletes apks folder: you can just run clean.
task cleanProjectAndApksFolder(type: Delete, dependsOn: clean) {
    delete "$rootProject.projectDir/apks/"
}

build.dependsOn copyApks
clean.dependsOn cleanApksFolder
repositories {
    mavenCentral()
}